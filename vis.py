"""
Salmon run statistics visualizer.
"""
import argparse
import os

from datetime import datetime

import matplotlib.dates as dts
import matplotlib.pyplot as plt
import mplcursors


def parse_statistics(file):
    """ Parses salmon run statistics from a file. """
    lines = file.read().splitlines()
    return {'dates': [datetime.strptime(date, '%Y-%m-%d') for date in lines[0].split(",")],
            'counts': [int(count) for count in lines[1].split(",")]}


def convert_to_same_year(statistics):
    """ Converts all statistics to the latest year, to enable better visualization. """
    year = max(data['dates'][0].year for data in statistics.values())
    for data in statistics.values():
        data['dates'] = [date.replace(year=year) for date in data['dates']]


def plot_salmon_statistics(statistics):
    """ Plots salmon run statistics. """
    for name, data in statistics.items():
        plt.plot_date(dts.date2num(data['dates']), data['counts'], 'o-', label=name)
    plt.grid()
    plt.legend()
    plt.title("Salmon run statistics")
    mplcursors.cursor(hover=True)
    plt.show()


def main():
    """ Program entry point. """
    parser = argparse.ArgumentParser("Visualizes salmon run statistics extracted from Swedish"
                                     "Lapland Fishing by the script stat.py")
    parser.add_argument('file', type=argparse.FileType('r'), nargs='+',
                        help="one or several files containing salmon run statistics (typically\
                              generated by the script stat.py)")
    args = parser.parse_args()
    statistics = {}
    for file in args.file:
        name = os.path.splitext(os.path.basename(file.name))[0]
        statistics[name] = parse_statistics(file)
    convert_to_same_year(statistics)
    plot_salmon_statistics(statistics)


if __name__ == "__main__":
    main()
